{"ast":null,"code":"import { CART_ITEMS, GET_RESTAURANTS, SELECT_RESTAURANT } from './actionTypes';\nconst initState = {\n  isLoading: false,\n  restaurantData: [],\n  restaurantItems: [],\n  cartItems: [],\n  abcItems: [],\n  isError: false,\n  restaurantName: '',\n  restaurantId: '',\n  cartRestaurant: '',\n  cartRestaurantId: ''\n};\n\nconst reducer = (state = initState, {\n  type,\n  payload\n}) => {\n  // console.log(type, payload);\n  switch (type) {\n    case GET_RESTAURANTS.REQUEST:\n      {\n        return { ...state,\n          isLoading: true,\n          isError: false\n        };\n      }\n\n    case GET_RESTAURANTS.SUCCESS:\n      {\n        return { ...state,\n          restaurantData: payload,\n          isLoading: false\n        };\n      }\n\n    case GET_RESTAURANTS.FAILURE:\n      {\n        return { ...state,\n          isError: true,\n          isLoading: false\n        };\n      }\n\n    case SELECT_RESTAURANT:\n      {\n        let seletedRestaurant = state.restaurantData.filter(item => item._id === payload._id)[0];\n        return {\n          restaurantId: seletedRestaurant._id,\n          restaurantName: seletedRestaurant.restaurentName,\n          restaurantItems: seletedRestaurant.foodItems\n        };\n      }\n\n    case CART_ITEMS.ADD:\n      {\n        let addedItems = state.cartItems.find(item => item._id === payload._id);\n\n        if (addedItems) {\n          addedItems.quantity += 1;\n          return { ...state,\n            cartItems: state.cartItems\n          };\n        } else {\n          payload.quantity = 1;\n          return { ...state,\n            cartItems: [...state.cartItems, payload]\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/madhu/Documents/DoneGo/Client/src/Redux/Restaurant/reducer.js"],"names":["CART_ITEMS","GET_RESTAURANTS","SELECT_RESTAURANT","initState","isLoading","restaurantData","restaurantItems","cartItems","abcItems","isError","restaurantName","restaurantId","cartRestaurant","cartRestaurantId","reducer","state","type","payload","REQUEST","SUCCESS","FAILURE","seletedRestaurant","filter","item","_id","restaurentName","foodItems","ADD","addedItems","find","quantity"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,eAArB,EAAsCC,iBAAtC,QAA+D,eAA/D;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,SAAS,EAAE,KADK;AAEhBC,EAAAA,cAAc,EAAE,EAFA;AAGhBC,EAAAA,eAAe,EAAC,EAHA;AAIhBC,EAAAA,SAAS,EAAC,EAJM;AAKhBC,EAAAA,QAAQ,EAAC,EALO;AAMhBC,EAAAA,OAAO,EAAE,KANO;AAOhBC,EAAAA,cAAc,EAAE,EAPA;AAQhBC,EAAAA,YAAY,EAAE,EARE;AAShBC,EAAAA,cAAc,EAAC,EATC;AAUhBC,EAAAA,gBAAgB,EAAC;AAVD,CAAlB;;AAcA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGZ,SAAT,EAAoB;AAAEa,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApB,KAA0C;AACxD;AACA,UAAQD,IAAR;AACE,SAAKf,eAAe,CAACiB,OAArB;AAA6B;AAC3B,eAAO,EACL,GAAGH,KADE;AAELX,UAAAA,SAAS,EAAE,IAFN;AAGLK,UAAAA,OAAO,EAAE;AAHJ,SAAP;AAKD;;AAED,SAAKR,eAAe,CAACkB,OAArB;AAA6B;AAC3B,eAAO,EACL,GAAGJ,KADE;AAELV,UAAAA,cAAc,EAAEY,OAFX;AAGLb,UAAAA,SAAS,EAAE;AAHN,SAAP;AAKD;;AAED,SAAKH,eAAe,CAACmB,OAArB;AAA6B;AAC3B,eAAO,EACL,GAAGL,KADE;AAELN,UAAAA,OAAO,EAAE,IAFJ;AAGLL,UAAAA,SAAS,EAAE;AAHN,SAAP;AAKD;;AAED,SAAKF,iBAAL;AAAuB;AACrB,YAAImB,iBAAiB,GAAGN,KAAK,CAACV,cAAN,CAAqBiB,MAArB,CAA4BC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaP,OAAO,CAACO,GAAzD,EAA8D,CAA9D,CAAxB;AACA,eAAM;AACJb,UAAAA,YAAY,EAAEU,iBAAiB,CAACG,GAD5B;AAEJd,UAAAA,cAAc,EAAEW,iBAAiB,CAACI,cAF9B;AAGJnB,UAAAA,eAAe,EAAEe,iBAAiB,CAACK;AAH/B,SAAN;AAKD;;AAED,SAAK1B,UAAU,CAAC2B,GAAhB;AAAqB;AACjB,YAAIC,UAAU,GAAGb,KAAK,CAACR,SAAN,CAAgBsB,IAAhB,CAAqBN,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaP,OAAO,CAACO,GAAlD,CAAjB;;AACA,YAAGI,UAAH,EAAc;AACZA,UAAAA,UAAU,CAACE,QAAX,IAAuB,CAAvB;AACA,iBAAO,EACL,GAAGf,KADE;AAELR,YAAAA,SAAS,EAAEQ,KAAK,CAACR;AAFZ,WAAP;AAID,SAND,MAOI;AACFU,UAAAA,OAAO,CAACa,QAAR,GAAmB,CAAnB;AACA,iBAAO,EACL,GAAGf,KADE;AAELR,YAAAA,SAAS,EAAE,CAAC,GAAGQ,KAAK,CAACR,SAAV,EAAqBU,OAArB;AAFN,WAAP;AAID;AACJ;;AACD;AACE,aAAOF,KAAP;AApDJ;AAsDD,CAxDD;;AA0DA,eAAeD,OAAf","sourcesContent":["import { CART_ITEMS, GET_RESTAURANTS, SELECT_RESTAURANT } from './actionTypes'\n\nconst initState = {\n  isLoading: false,\n  restaurantData: [],\n  restaurantItems:[],\n  cartItems:[],\n  abcItems:[],\n  isError: false,\n  restaurantName: '',\n  restaurantId: '',\n  cartRestaurant:'',\n  cartRestaurantId:'',\n}\n\n\nconst reducer = (state = initState, { type, payload }) => {\n  // console.log(type, payload);\n  switch (type) {\n    case GET_RESTAURANTS.REQUEST:{\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    }\n\n    case GET_RESTAURANTS.SUCCESS:{\n      return {\n        ...state,\n        restaurantData: payload,\n        isLoading: false\n      };\n    }\n\n    case GET_RESTAURANTS.FAILURE:{\n      return {\n        ...state,\n        isError: true,\n        isLoading: false\n      };\n    }\n\n    case SELECT_RESTAURANT:{\n      let seletedRestaurant = state.restaurantData.filter(item => item._id === payload._id)[0]\n      return{\n        restaurantId: seletedRestaurant._id,\n        restaurantName: seletedRestaurant.restaurentName,\n        restaurantItems: seletedRestaurant.foodItems\n      }\n    }\n\n    case CART_ITEMS.ADD: {\n        let addedItems = state.cartItems.find(item => item._id === payload._id)\n        if(addedItems){\n          addedItems.quantity += 1\n          return {\n            ...state,\n            cartItems: state.cartItems\n          }\n        }\n        else{\n          payload.quantity = 1\n          return {\n            ...state,\n            cartItems: [...state.cartItems, payload]\n          }\n        }\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}